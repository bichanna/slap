#
# str.slap
# SLAP
#
# Created by Nobuharu Shimazu on 3/4/2022
#
# Import this file by `import "strutils";`

# str.slap contains the core string library for SLAP.
# This provides a set of utility functions for working with strings and data
# encoded in strings.

# The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.
let AsciiLowercase = "abcdefghijklmnopqrstuvwxyz";

# The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.
let AsciiUppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

# The concatenation of the AsciiLowercase and AsciiUppercase.
let AsciiLetters = AsciiLowercase + AsciiUppercase;

# The string '0123456789'
let Digits = "0123456789";

# substring returns the substring beginning at index 'f' and ending at index 't-1' [f, t)
# signature: substring(x: str, f: int, t: int): str
def substring(x, f, t) {
    let result = "";
    for ($i = f; i < t; i++) result += x@[i];
    return result;
}

# expand disassembles a string to a list of characters, which are just 
# a list of one-character strings.
# signature: expand(x: str): @[str]
def expand(x) {
    let list = [];
    for ($i = 0; i < len(x); i++) list->append(x@[i]);
    return list;
}

# fuse concatenates together a list of strings into a single string
# and returns the result, so the original list is not mutated.
# signature: fuse(x: [str]): str
def fuse(x) {
    let result = "";
    for ($i = 0; i < len(x); i++) result += str(x@[i]);
    return result;
}

# replace replaces all the occurrence of 'target' with 'repl'
# and returns the modified string.
# signature: replaceChar(x: str, target: str, repl: str): str
def replaceChar(x, target, repl) {
    let charList = expand(x);
    for ($i = 0; i < len(charList); i++) {
        if (charList@[i] == target) charList@[i] = repl;
    }
    return fuse(charList);
}

# endsWith reports whether a string ends with the substring 'suffix'.
# signature: endsWith(x: str, suffix: str): bool
def endsWith(x, suffix) {
    let strLen = len(x);
    let n = len(suffix);
    let nMinN = len(x) - n;
    if (n <= strLen and x->substring(nMinN, strLen) == suffix) return true;
    return false;
}

# startsWith reports whether a string starts with the substring 'prefix'.
# signature: startsWith(x: str, prefix: str): bool
def startsWith(x, prefix) {
    let strLen = len(x);
    let n = len(prefix);
    if (n <= strLen and x->substring(0, n) == prefix) return true;
    return false;
}

