#
# std.slap
# SLAP
#
# Created by Nobuharu Shimazu on 2/22/2022
#
# Import this file by `import "std";`

# std.slap contains the core standard library for SLAP.

# identity returns its first argument
def identity(x) {
    return x;
}

# join concatenates two lists and returns the
# joined list (does not mutate the original lists).
# signature: join(x: @[any], y: @[any]): @[any]
def join(x, y) {
    let newList = [];
    for ($i = 0; i < len(x); i++) newList->append(x@[i]);
    for ($j = 0; j < len(y); j++) newList->append(y@[j]);
    return newList;
}

# slice takes a list, and returns a copied "slice" of the
# original list from the range [x, y)
# signature: slice(list: @[any], x: int, y: int): @[any]
def slice(list, x, y) {
    let newList = [];
    for ($i = x; i < y; i++) newList->append(list@[i]);
    return newList;
}

# areUnique takes a list and reports whether no element of
# the list appears twice in a row. Elements may occur twice
# in the list if they are separated by other elements.
# signature: areUnique(list: @[any]): bool
def areUnique(list) {
    if (len(list) == 0) return false;
    if (len(list) == 1) return true;
    
    let previous = list@[0];
    for ($i = 1; i < len(list); i++) {
        if (previous == list@[i]) return false;
        previous = list@[i];
    }
    return true;
}

# uniqueList takes a list and returns a copied list where no element 
# of the original list appears twice in a row. Elements may occur twice
# in the list if they are separated by other elements.
# signature: uniqueList(list: @[any]): @[any]
def uniqueList(list) {
    if (len(list) == 0 or len(list) == 1) return list;
     
    let newList = [];
    let previous = list@[0];
    newList -> append(previous);
    for ($i = 1; i < len(list); i++) {
        if (previous != list@[i]) newList->append(list@[i]);
        previous = list@[i];
    }
    return newList;
}

# contains reports whether a list contains an item equal to 'y'.
# signature: contains(x: @[any] | str, y: any): bool
def contains(x, y) {
    for ($i = 0; i < len(x); i++) {
        if (x@[i] == y) return true;
    }
    return false;
}

# forEach executes a provided function once for each list element or map element.
# signature: forEach(listOrMap: @[any] | @{any: any}, func: def(any) | def(any, any))
def forEach(listOrMap, func) {
    if (isList(listOrMap)) {
        let list = listOrMap;
        for ($i = 0; i < len(list); i++) func(list@[i]);
    } elif (isMap(listOrMap)) {
        let mapKeys = keys(listOrMap); # already knows that listOrMap is a map
        for ($i = 0; i < len(mapKeys); i++) func(mapKeys@[i], listOrMap@[mapKeys@[i]]);
    }
}

# indexOf returns the index of the first item equal to x in a list.
# If nothing matches, it return -1.
# signature: indexOf(list: @[any], x: any): int
def indexOf(list, x) {
    for ($i = 0; i < len(list); i++) {
        if (list@[i] == x) return i;
    }
    return -1;
}

# merge concatenates two maps and returns the
# merged map (does not mutate the original maps).
# signature: merge(x: @{any: any}, y: @{any: any}): @{any: any}
def merge(x, y) {
    let newMap = {};
    let func = def (k, v) => newMap@[k] = v;

    x -> forEach(func);
    y -> forEach(func);

    return newMap;
}

# range returns a list of [start, stop) with optional step
# signature: range(start: int, stop: int, step: int = 1)
def range(start, stop, step = 1) {
    let list = [];
    if (start < stop) {
        for ($i = start; i < stop; i += step) list->append(i);
    } else {
        for ($i = start; i > stop; i += step) list->append(i);
    }
    return list;
}

# sum returns the sum of the passed values
# signature: sum(list+: int | float): int | float
def sum(list+) {
    let sum = 0;
    for ($i = 0; i < len(list); i++) sum += list@[i];
    return sum;
}